#lang rhombus/static

import:
  "lvar.rhm" as Lvar
  "cvar.rhm" as Cvar
  "pass_rco.rhm" open

export explicate_program

fun explicate_assign(expr :: Lvar.M.Expr,
                     var :: Symbol,
                     cont :: Cvar.Block) :: Cvar.Block:
  match expr
  | v :: Lvar.Atom:
      [Cvar.Assign(var, v), &cont]
  | Lvar.Prim(op, args):
      [Cvar.Assign(var, Cvar.Prim(op, args)), &cont]
  | Lvar.Let(x, e, body):
      let new_cont = explicate_assign(body, var, cont)
      explicate_assign(e, x, new_cont)

fun explicate_tail(expr :: Lvar.M.Expr) :: Cvar.Block:
  match expr
  | v :: Lvar.Atom: [Cvar.Return(v)]
  | Lvar.Prim(op, args):
      [Cvar.Return(Cvar.Prim(op, args))]
  | Lvar.Let(x, e, body):
      let cont = explicate_tail(body)
      explicate_assign(e, x, cont)

fun record_vars(block :: Cvar.Block) :: Set.of(Symbol):
  for values(s :: Set = Set{}) (stmt: block):
    match stmt
    | Cvar.Assign(x, _): s ++ {x}
    | _: s  

fun explicate_program(pgm :: Lvar.M.Program):
  let section = explicate_tail(pgm.expr)
  Cvar.Program(pgm.info ++ {#'vars: record_vars(section)},
               {#'start: section})

