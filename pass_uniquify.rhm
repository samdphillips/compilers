#lang rhombus/static

import:
  "lvar.rhm" open

export uniquify

fun uniquify(expr :: Lvar.Expr,
             renames :: Map.of(Symbol, Symbol) = {}) :: Lvar.Expr:
  match expr
  | n :: Int: n
  | x :: Symbol: renames[x]
  | Lvar.Prim(_, [args, ...]):
      (expr :~ Lvar.Prim) with (args = [uniquify(args, renames), ...])
  | Lvar.Let(var, rhs, body):
      let new_var = Symbol.gen(var)
      let new_rhs = uniquify(rhs, renames)
      let new_body = uniquify(body, renames ++ {var: new_var})
      Lvar.Let(new_var, new_rhs, new_body)
