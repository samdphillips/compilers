#lang rhombus/static/and_meta

import:
  "lvar.rhm" open

export remove_complex_operations

annot.macro 'Binds':
  'List.of(Pair.of(Symbol, Lvar_mon.Expr))'

fun build_let(binds :: Binds, body):
  for values(body = body):
    each Pair(var, expr): binds
    Lvar.Let(var, expr, body)

fun rco_atom(expr :: Lvar.Expr) :: values(Lvar_mon.Atom, Binds):
  match expr
  | _ :: Lvar.Atom:
      values(expr, [])
  | _ :: Lvar.Prim || Lvar.Let:
      let b = Symbol.gen(#'temp)
      let e = rco_expr(expr)
      values(b, [Pair(b, e)])

fun rco_expr(expr :: Lvar.Expr) :: Lvar_mon.Expr:
  match expr
  | v :: Lvar.Atom: v
  | Lvar.Prim(op, args):
      let values(atoms, binds):
        for values(atoms :~ List = [], binds :: Binds = []):
          each e: args
          let values(atom, b) = rco_atom(e)
          values(atoms.add(atom), b ++ binds)
      build_let(binds, (expr :~ Lvar.Prim) with (args = atoms))
  | Lvar.Let(_, rhs, body):
      let new_rhs = rco_expr(rhs)
      let new_body = rco_expr(body)
      (expr :~ Lvar.Let) with (expr = new_rhs, body = new_body)

fun remove_complex_operations(e :: Lvar.Expr) :: Lvar_mon.Expr:
  rco_expr(e)
