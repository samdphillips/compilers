#lang rhombus/static

import:
  "lvar.rhm" open
  lib("racket/base.rkt"):
    only read
    expose read

export interp_lvar

fun interp_lvar_expr(e :: Lvar.Expr, env :: Map.of(Symbol, Int)):
  match e
  | n :: Int: n
  | x :: Symbol: env[x]
  | Lvar.Let(x, e, body):
      let v = interp_lvar_expr(e, env)
      let new_env = env ++ {x: v}
      interp_lvar_expr(body, new_env)
  | Lvar.Prim(#'read, []):
      read()
  | Lvar.Prim(#'add, [a, b]):
      let u = interp_lvar_expr(a, env)
      let v = interp_lvar_expr(b, env)
      u + v
  | Lvar.Prim(#'negate, [a]):
      let v = interp_lvar_expr(a, env)
      0 - v
  | Lvar.Prim(#'sub, [a, b]):
      let u = interp_lvar_expr(a, env)
      let v = interp_lvar_expr(b, env)
      u - v

fun interp_lvar(expr :: Lvar.Expr):
  interp_lvar_expr(expr, {})