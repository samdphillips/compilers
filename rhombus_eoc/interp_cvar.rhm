#lang rhombus/static/and_meta

import:
  "cvar.rhm" open
  lib("racket/base.rkt"):
    only read
    expose read

export run

fun
| do_prim(#'add, [a, b]): a + b
| do_prim(#'negate, [a]): 0 - a
| do_prim(#'sub, [a, b]): a - b
| do_prim(#'read, []): read()

class Interp():
  private field binds :: MutableMap = MutableMap{}

  method interp_atom(expr :: Atom):
    match expr
    | n :: Int: n
    | x :: Symbol:
        match binds[x]
        | #void: error("unbound var: " +& x)
        | v: v

  method interp_expr(expr :: Expr):
    match expr
    | _ :: Atom: interp_atom(expr)
    | Prim(op, [args, ...]):
        // methods act weird with repetitions, but functions work
        fun do_atom(e): interp_atom(e)
        do_prim(op, [do_atom(args), ...])

  method interp_cvar_stmt(stmt :: Stmt):
    match stmt
    | Assign(var, expr):
        binds[var] := interp_expr(expr)

  method interp_cvar_section(insts :: Block):
    match insts
    | [Return(expr)]:
        interp_expr(expr)
    | [stmt, &cont]:
        interp_cvar_stmt(stmt)
        interp_cvar_section(cont)

  method run(pgm :: Program, label :: Symbol):
    for (v: (pgm.info[#'vars] :~ Set)):
        binds[v] := #void
    interp_cvar_section(pgm.blocks[label])

fun run(pgm :: Program, label :: Symbol):
  Interp().run(pgm, label)