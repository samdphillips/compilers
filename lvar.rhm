#lang rhombus/static/and_meta

export:
  Lvar
  Lvar_mon

annot.macro 'Atom': 'Int || Symbol'

class Prim(opname :: Symbol, args :: List)
class Let(var :: Symbol, expr, body)

fun make_is_expr(is_prim_child):
  fun _is_expr(v):
    match v
    | _ :: Atom: #true
    | Let(_, e, body):
        _is_expr(e) && _is_expr(body)
    | Prim(_, [arg, ...]):
        all(is_prim_child(arg), ...)
    | _: #false
  _is_expr

namespace Lvar:
  export:
    Atom Expr
    except_space expr: Prim Let
    only_space expr:
      rename:
        _Prim as Prim
        _Let as Let

  def is_expr:
    make_is_expr(fun (v): is_expr(v))

  annot.macro 'Expr': 'satisfying(is_expr)'

  fun _Prim(opname :: Symbol, args :: List.of(Expr)) :: Prim:
    Prim(opname, args)

  fun _Let(var :: Symbol, expr :: Expr, body :: Expr) :: Let:
    Let(var, expr, body)

namespace Lvar_mon:
  export:
    Atom Expr
    except_space expr: Prim Let
    only_space expr:
      rename:
        _Prim as Prim
        _Let as Let

  def is_expr:
    make_is_expr(fun (v): v is_a Atom)

  annot.macro 'Expr': 'satisfying(is_expr)'

  fun _Prim(opname :: Symbol, args :: List.of(Atom)) :: Prim:
    Prim(opname, args)

  fun _Let(var :: Symbol, expr :: Expr, body :: Expr) :: Let:
    Let(var, expr, body)
